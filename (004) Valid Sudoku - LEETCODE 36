/**
 * @param {character[][]} board
 * @return {boolean}
 */

var isValidSudoku = function(board) {
    let rows = Array.from({ length: 9 }, () => new Set());
    let cols = Array.from({ length: 9 }, () => new Set());
    let boxes = Array.from({ length: 9 }, () => new Set());

//Set faster than array, easier to read, has the wanted function for the Sudoku problem. 
//includes() → O(n)
//Set.has() → O(1)

    for (let r = 0; r < 9; r++) {
        for (let c = 0; c < 9; c++) {
            if (board[r][c] === '.') {
                continue;
            }//if empty continue

            let value = board[r][c];
            let boxIndex = Math.floor(r / 3) * 3 + Math.floor(c / 3); //calculates the box index[1..9]

            if (rows[r].has(value) || cols[c].has(value) || boxes[boxIndex].has(value)) {
                return false; //checks the condition for Sudoku
            }
            //if checks the requirements values added to corresponding indexes
            rows[r].add(value);
            cols[c].add(value);
            boxes[boxIndex].add(value);
        }
    }

    return true;    
};
